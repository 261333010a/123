package singletion;

public class test {
    /*
    单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点

    单例模式要点：
        ①某个类只能有一个实例
        ②它必须自行创建这个示例
        ③必须自行向整个系统提供这个实例
     */

    /*
    实现步骤
    1.构造方法私有

    2.提供静态接口方法，可以获取本类实例-------静态方法  方法名和类名相同

     */

    /*
    final修饰的值为常量
    final可以修饰的元素：
        类：不能被继承
        变量(属性和局部变量)：不能被重新赋值
            在声明时赋值，或在构造器中赋值
            系统不会对final属性默认的赋初始值
        方法：不能在子类中被覆盖，即不能修改
     */

    /*
    抽象类希望有子类  final类不能有子类
    final类的方法能否被同一个包的类访问不是由final决定
     */
    /*
    (1)final类:final类不能被继承，因此final类的成员方法没有机会被覆盖，默认都是final的。
    (2)final方法:如果一个类不允许其子类覆盖某个方法，则可以把这个方法声明为final方法。
    (3)final变量(常量):用final修饰的成员变量表示常量，只能被赋值一次，赋值后值无法改变。
    abstract不能和final一起使用：final修饰后的方法，锁定方法，防止任何继承类修改它的意义和实现，
    而abstract子类必须覆盖实现父类中的抽象方法，相互冲突，不能使用
     */
}
